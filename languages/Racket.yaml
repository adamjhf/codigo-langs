name: Racket
description: Racket is a general-purpose, multi-paradigm programming language derived from Scheme. It features a diverse ecosystem, powerful macro system, and is designed for language-oriented programming, enabling the creation of domain-specific languages.
category: programming
status: active
aliases:
  - PLT Scheme
file_extensions:
  - rkt
  - rktd
  - rktl
  - scrbl
compilers:
  - name: Racket
    type: hybrid
    license: LGPL-3.0
    source_url: https://github.com/racket/racket
    is_reference: true
paradigms:
  - functional
  - imperative
  - object-oriented
  - meta-programming
  - language-oriented
  - reflective
typing:
  system: dynamic
  strength: strong
  inference: partial
  type_checking: runtime
  type_coercion: conservative
  type_annotations: optional
execution:
  type:
    - compiled
    - interpreted with JIT compilation
  compiles_to:
    - bytecode
  runtime_environments:
    - language-specific runtime
    - native OS process
  performance:
    startup_time: moderate
    memory_usage: moderate
    computation_speed: moderate
    compilation_speed: fast
domains:
  primary:
    - education
    - web development
  secondary:
    - scientific computing
    - data science
    - scripting
    - text processing
    - compiler
  emerging:
    - distributed system
platforms:
  operating_systems:
    - Windows
    - macOS
    - Linux
    - BSD
  architectures:
    - x86
    - x86-64
    - ARM
    - ARM64
    - platform-independent
ecosystem:
  maturity: high
  package_registry: https://pkgs.racket-lang.org/
  community_size: small
  learning_resources: medium
  job_market_demand: low
complexity:
  learning_curve: high
  cognitive_load: moderate
  syntax_complexity: low
  semantic_complexity: high
language_features:
  immutability: optional
  metaprogramming: true
  generics: true
  c_interop: true
  pattern_matching: true
  null_safety: false
  memory_safety:
    type: managed
    level: high
  memory_management:
    type: garbage collection
    implementation: generational garbage collector
  key_features:
    - first-class functions
    - closures
    - macros
    - pattern matching
    - modules
    - reflection
    - meta-programming
    - REPL
    - interactive development
    - native FFI
concurrency:
  model: threads
  features:
    - promises/futures
    - channels
  ease_of_use: moderate
error_handling:
  primary_mechanism: exceptions
  features:
    - stack traces
    - custom error types
    - error chaining
    - cleanup actions
  stack_traces: true
  debugging:
    source_maps: true
    breakpoints: true
    step_debugging: true
package_managers:
  primary: raco
  alternatives:
    - planet
popular_frameworks:
  frontend:
    - Racket/gui
    - Pict
    - Slideshow
  backend:
    - Web Server
    - Rackjure
  testing:
    - RackUnit
development_tools:
  lsps:
    - Racket Language Server
  debugging:
    - DrRacket
  profiling:
    - Racket Profile
  build_systems:
    - raco
  linters:
    - raco setup
standard_library:
  maturity: high
  key_areas:
    - data structures
    - file I/O
    - networking
    - text processing
    - regular expressions
    - date/time
    - mathematics
    - JSON/XML processing
    - HTTP client/server
    - GUI
  size: large
versioning:
  release_cycle: fixed schedule
  backwards_compatibility: high
history:
  inception: 1995-01-01
  developer:
    - PLT Inc.
    - Northeastern University
    - Matthias Felleisen
  designed_by:
    - Matthew Flatt
    - Matthias Felleisen
    - Robby Findler
    - Shriram Krishnamurthi
  logo: https://commons.wikimedia.org/wiki/Special:FilePath/Racket-logo.svg
  influenced_by:
    languages:
      - Scheme
      - Lisp
official_website: https://racket-lang.org/
official_blog_rss: https://blog.racket-lang.org/feeds/all.atom.xml
documentation:
  quality: very high
  official_sources:
    - https://docs.racket-lang.org/
references:
  github_topics:
    - racket
    - racket-lang
  stackexchange_tags:
    - racket
    - https://stackoverflow.com/tags/racket
  wikidata_id: Q2889
  subreddit: Racket
color: '#3c5caa'